% Define the parish names
parishNames = {'Acadia', 'Allen', 'Ascension', 'Assumption', 'Avoyelles', 'Beauregard', 'Bienville', 'Bossier', ...
               'Caddo', 'Calcasieu', 'Caldwell', 'Cameron', 'Catahoula', 'Claiborne', 'Concordia', 'De Soto', ...
               'East Baton Rouge', 'East Carroll', 'East Feliciana', 'Evangeline', 'Franklin', 'Grant', 'Iberia', ...
               'Iberville', 'Jackson', 'Jefferson', 'Jefferson Davis', 'LaSalle', 'Lafayette', 'Lafourche', ...
               'Lincoln', 'Livingston', 'Madison', 'Morehouse', 'Natchitoches', 'Orleans', 'Ouachita', 'Plaquemines', ...
               'Pointe Coupee', 'Rapides', 'Red River', 'Richland', 'Sabine', 'St. Bernard', 'St. Charles', 'St. Helena', ...
               'St. James', 'St. John the Baptist', 'St. Landry', 'St. Martin', 'St. Mary', 'St. Tammany', 'Tangipahoa', ...
               'Tensas', 'Terrebonne', 'Union', 'Vermilion', 'Vernon', 'Washington', 'Webster', 'West Baton Rouge', ...
               'West Carroll', 'West Feliciana', 'Winn'};

% Load the adjacency matrix from the CSV file, assuming the rows and columns are ordered as per parishNames
adjMatrix = readmatrix('Pairwise County Adjacency Distances.csv');
adjMatrix = adjMatrix(:, 2:65);

% Create a graph from the adjacency matrix
G = graph(adjMatrix, parishNames);

% Plot the graph with labels
figure;
plot(G, 'NodeLabel', parishNames, 'EdgeLabel', G.Edges.Weight);
title('Graph Representation of Louisiana Parishes');